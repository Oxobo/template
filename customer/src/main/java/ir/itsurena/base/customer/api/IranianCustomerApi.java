/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ir.itsurena.base.customer.api;

import io.swagger.annotations.*;
import ir.itsurena.base.customerdto.dto.IranianCustomerDto;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-02-10T07:17:09.190Z")
@Api(value = "iranianCustomer", description = "the iranianCustomer API")
public interface IranianCustomerApi {

    @ApiOperation(value = "اضافه نمودن مشتری حقیقی ایرانی", nickname = "createIranianCustomer", notes = "اضافه نمودن مشتری حقیقی ایرانی", tags={ "iranianCustomer", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "عملیات موفق") })
    @RequestMapping(value = "/iranianCustomer",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<IranianCustomerDto> createIranianCustomer(@ApiParam(value = "ورودی یک شئ از نوع شخص حقیقی ایرانی", required = true) @Valid @RequestBody IranianCustomerDto body);


    @ApiOperation(value = "حذف نمودن یک مشتری ایرانی حقیقی", nickname = "deleteIranianPerson", notes = "یک مشتری حقیقی ایرانی را می توان به صورت منطقی حذف نمود", tags={ "iranianCustomer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "شناسه نامعتبر"),
        @ApiResponse(code = 404, message = "مشتری مورد نظر یافت نشد") })
    @RequestMapping(value = "/iranianCustomer/{iranianCustomerId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteIranianPerson(@ApiParam(value = "شناسه مشتری حقیقی ایرانی که باید حذف شود", required = true) @PathVariable("iranianCustomerId") Long iranianCustomerId, @ApiParam(value = "") @RequestHeader(value = "api_key", required = false) String apiKey);


    @ApiOperation(value = "دریافت تمام مشتریان حقیقی ایرانی", nickname = "getIranianAllPersons", notes = "یک لیست از اشیاء حقیقی ایرانی بر میگرداند", response = IranianCustomerDto.class, responseContainer = "List", tags={ "iranianCustomer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "عملیات موفق", response = IranianCustomerDto.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "هیچ شئ ای از نوع مشتری حقیقی ایرانی یافت نشد") })
    @RequestMapping(value = "/iranianCustomer",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<IranianCustomerDto>> getIranianAllPersons();


    @ApiOperation(value = "یافتن مشتری حقیقی ایرانی با استفاده از کلید اصلی", nickname = "getIranianCustomerById", notes = "یک شئ مشتری حقیقی برگردانده می شود", response = IranianCustomerDto.class, tags={ "iranianCustomer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "عملیات موفق", response = IranianCustomerDto.class),
        @ApiResponse(code = 400, message = "شناسه نامعتبر"),
        @ApiResponse(code = 404, message = "شخص حقیقی مورد نظر یافت نشد") })
    @RequestMapping(value = "/iranianCustomer/{iranianCustomerId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<IranianCustomerDto> getIranianCustomerById(@ApiParam(value = "شناسه مشتری حقیقی که باید برگردانده شود", required = true) @PathVariable("iranianCustomerId") Long iranianCustomerId);


    @ApiOperation(value = "یافتن مشتری حقیقی ایرانی با استفاده از شماره ملی", nickname = "getIranianCustomerByNationalId", notes = "یک شئ مشتری حقیقی برگردانده می شود", response = IranianCustomerDto.class, tags={ "iranianCustomer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "عملیات موفق", response = IranianCustomerDto.class),
        @ApiResponse(code = 400, message = "شناسه نامعتبر"),
        @ApiResponse(code = 404, message = "شخص حقیقی مورد نظر یافت نشد") })
    @RequestMapping(value = "/iranianCustomer/findByPersonalInfo/{nationalId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<IranianCustomerDto> getIranianCustomerByNationalId(@ApiParam(value = "شماره ملی مشتری که باید برگردانده شود ", required = true) @PathVariable("nationalId") String nationalId);


    @ApiOperation(value = "به روز رسانی اشخاص حقیقی ایرانی", nickname = "updateIranianCustomer", notes = "به روز رسانی اشخاص حقیقی ایرانی", tags={ "iranianCustomer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "شناسه نامعتبر"),
        @ApiResponse(code = 404, message = "مشتری یافت نشد"),
        @ApiResponse(code = 405, message = "اعتبار سنجی ناموفق") })
    @RequestMapping(value = "/iranianCustomer",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<IranianCustomerDto> updateIranianCustomer(@ApiParam(value = "مشتری حقیقی که باید به روز رسانی شود", required = true) @Valid @RequestBody IranianCustomerDto body);

}
